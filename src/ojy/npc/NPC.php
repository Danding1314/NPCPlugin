<?php

namespace ojy\npc;

use pocketmine\entity\Human;
use pocketmine\event\entity\EntityDamageEvent;
use pocketmine\level\Level;
use pocketmine\math\Vector3;
use pocketmine\nbt\tag\CompoundTag;
use pocketmine\nbt\tag\StringTag;
use pocketmine\network\mcpe\protocol\MovePlayerPacket;
use pocketmine\Player;

class NPC extends Human
{

    public function __construct(Level $level, CompoundTag $nbt)
    {
        parent::__construct($level, $nbt);
    }

    public function initEntity(): void
    {
        parent::initEntity(); // TODO: Change the autogenerated stub
        $this->setImmobile();
        $data = $this->getData();
        if ($data instanceof NPCData) {
            $this->setScale($data->getScale());
            $name = $data->getName();
            $d = explode("(줄바꿈)", $name);
            $d = implode("\n", $d);
            $this->setNameTag($d);
            $this->setNameTagAlwaysVisible();
        }
    }

    public function setScale(float $value): void
    {
        parent::setScale($value);
        $data = $this->getData();
        $data->setScale($value);
        $this->setData($data);
    }

    public function attack(EntityDamageEvent $source): void
    {
        $source->setCancelled();
        parent::attack($source); // TODO: Change the autogenerated stub
    }

    public function move(float $dx, float $dy, float $dz): void
    {

    }

    /**
     * @return Player[]
     */
    public function getNearPlayers(): array
    {
        $res = [];
        foreach ($this->level->getPlayers() as $p) {
            if ($p->distance($this) < 6)
                $res[] = $p;
        }
        return $res;
    }

    public function onUpdate(int $currentTick): bool
    {
        $hasUpdate = parent::onUpdate($currentTick);
        if ($currentTick % 4 === 0) {
            $es = $this->getNearPlayers();
            foreach ($es as $e)
                $this->look($e);
        }
        return $hasUpdate; // TODO: Change the autogenerated stub
    }


    public function look(Player $target)
    {
        $horizontal = sqrt(($target->x - $this->x) ** 2 + ($target->z - $this->z) ** 2);
        $vertical = $target->y - $this->y;
        $pitch = -atan2($vertical, $horizontal) / M_PI * 180; //negative is up, positive is down

        $xDist = $target->x - $this->x;
        $zDist = $target->z - $this->z;
        $yaw = atan2($zDist, $xDist) / M_PI * 180 - 90;
        if ($yaw < 0) {
            $yaw += 360.0;
        }

        $pk = new MovePlayerPacket();
        $pk->entityRuntimeId = $this->getId();
        $pk->position = $this->getPosition()->add(0, 1.62 * $this->getScale() - ($this->getScale() - 1) * 1.62, 0);
        $pk->yaw = $yaw;
        $pk->headYaw = $yaw;
        $pk->pitch = $pitch;
        $pk->mode = MovePlayerPacket::MODE_NORMAL;
        $target->sendDataPacket($pk);
    }

    public function getData(): ?NPCData
    {
        $tag = $this->namedtag->getTag('NPCData');
        if ($tag instanceof StringTag) {
            return NPCData::deserialize($tag->getValue());
        }
        return null;
    }

    public function setData(NPCData $data)
    {
        $this->namedtag->setString('NPCData', $data->serialize());
    }

    public function saveNBT(): void
    {
        parent::saveNBT();

        $data = $this->getData();
        if ($data instanceof NPCData) {
            $this->namedtag->setString('NPCData', $data->serialize());
        }
    }
}